{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Results","this","props","title","className","release","budget","runtime","summary","React","Component","App","context","state","value","autocompleteData","onChange","bind","onSelect","getItemValue","renderItem","retrieveMovieList","searchText","axios","get","then","res","setState","data","e","target","val","item","isHighlighted","key","id","style","background","label","items","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mTAMMA,G,uLAEF,MAAyB,KAArBC,KAAKC,MAAMC,MAEN,GAGL,yBAAKC,UAAU,YACf,yBAAKA,UAAU,eAAeH,KAAKC,MAAMC,MAAzC,KACA,yBAAKC,UAAU,iBAAf,iBACeH,KAAKC,MAAMG,QAD1B,iCAEUJ,KAAKC,MAAMI,OAFrB,kCAGWL,KAAKC,MAAMK,QAHtB,aAG6C,6BAAM,6BACnD,yBAAKH,UAAU,kBAAf,YACA,yBAAKA,UAAU,WAAWH,KAAKC,MAAMM,QAArC,U,GAdcC,IAAMC,YAoBPC,E,YAEjB,WAAYT,EAAOU,GAAU,IAAD,8BACxB,4CAAMV,EAAOU,KACRC,MAAQ,CACTC,MAAO,GACPC,iBAAkB,GAClBZ,MAAO,GACPK,QAAS,GACTH,QAAS,GACTC,OAAQ,GACRC,QAAS,IAKb,EAAKS,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAClB,EAAKI,kBAAoB,EAAKA,kBAAkBJ,KAAvB,gBAlBD,E,+EAqBVK,GAAY,IAAD,OACzBC,IAAMC,IAAN,mEAAsEF,IACrEG,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZZ,iBAAkBW,EAAIE,KAAJ,c,+BAIjBC,GACL5B,KAAK0B,SAAS,CACVb,MAAOe,EAAEC,OAAOhB,QAEpBb,KAAKoB,kBAAkBQ,EAAEC,OAAOhB,S,+BAG3BiB,GAAK,IAAD,OACXR,IAAMC,IAAN,gEAAmEO,IAClEN,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACVb,MAAO,GACPC,iBAAkB,GAClBZ,MAAOuB,EAAIE,KAAJ,MACPvB,QAASqB,EAAIE,KAAJ,QACTtB,OAAQoB,EAAIE,KAAJ,OACRrB,QAASmB,EAAIE,KAAJ,QACTpB,QAASkB,EAAIE,KAAJ,e,iCAMNI,EAAMC,GACb,OACI,yBAAKC,IAAKF,EAAKG,GAAIC,MAAO,CAAEC,WAAYJ,EAAgB,YAAc,UACjED,EAAKM,S,mCAKLN,GACT,MAAM,GAAN,OAAUA,EAAKG,M,+BAIf,OACE,6BACE,yBAAK/B,UAAU,cACX,oDAEJ,yBAAKA,UAAU,gBACX,kBAAC,IAAD,CACIe,aAAclB,KAAKkB,aACnBoB,MAAOtC,KAAKY,MAAME,iBAClBK,WAAYnB,KAAKmB,WACjBN,MAAOb,KAAKY,MAAMC,MAClBE,SAAUf,KAAKe,SACfE,SAAUjB,KAAKiB,YAGvB,6BACI,kBAAC,EAAD,CACIf,MAAOF,KAAKY,MAAMV,MAClBE,QAASJ,KAAKY,MAAMR,QACpBC,OAAQL,KAAKY,MAAMP,OACnBC,QAASN,KAAKY,MAAMN,QACpBC,QAASP,KAAKY,MAAML,gB,GAxFPC,IAAMC,WCdnB8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.705a7bea.chunk.js","sourcesContent":["import React from 'react';\nimport Autocomplete from 'react-autocomplete'\nimport axios from 'axios'\n\nimport './App.css';\n\nclass Results extends React.Component {\n  render() {\n    if (this.props.title === \"\")\n    {\n      return \"\"\n    }\n      return (\n        <div className=\"App-body\">\n        <div className=\"Movie-title\">{this.props.title} </div>\n        <div className=\"Movie-subtext\">\n        Release date: {this.props.release} &nbsp; &nbsp; &nbsp; &nbsp;\n        Budget: ${this.props.budget} &nbsp; &nbsp; &nbsp; &nbsp;\n        Run-time: {this.props.runtime} minutes </div><br /><br />\n        <div className=\"Summary-header\">Summary </div>\n        <div className=\"Summary\">{this.props.summary} </div>\n        </div>\n      )\n    }\n}\n\nexport default class App extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            value: \"\",\n            autocompleteData: [],\n            title: \"\",\n            summary: \"\",\n            release: \"\",\n            budget: \"\",\n            runtime: \"\"\n        };\n\n        // Bind `this` context to functions of the class\n        // allows 'this' to work in the callbacks\n        this.onChange = this.onChange.bind(this);\n        this.onSelect = this.onSelect.bind(this);\n        this.getItemValue = this.getItemValue.bind(this);\n        this.renderItem = this.renderItem.bind(this);\n        this.retrieveMovieList = this.retrieveMovieList.bind(this);\n    }\n\n    retrieveMovieList(searchText){\n        axios.get(`https://moviesearchzar.herokuapp.com/getMovies?movieName=${searchText}`)\n        .then(res => {\n          this.setState({\n            autocompleteData: res.data['titles'] });\n          });\n        }\n\n    onChange(e){\n        this.setState({\n            value: e.target.value\n        });\n        this.retrieveMovieList(e.target.value);\n    }\n\n    onSelect(val){\n      axios.get(`https://moviesearchzar.herokuapp.com/getMovie?movieId=${val}`)\n      .then(res => {\n        this.setState({\n            value: \"\",\n            autocompleteData: [],\n            title: res.data[\"title\"],\n            release: res.data[\"release\"],\n            budget: res.data[\"budget\"],\n            runtime: res.data[\"runtime\"],\n            summary: res.data[\"summary\"]\n        });\n      });\n\n    }\n\n    renderItem(item, isHighlighted){\n        return (\n            <div key={item.id} style={{ background: isHighlighted ? 'lightgray' : 'white' }}>\n                {item.label}\n            </div>\n        );\n    }\n\n    getItemValue(item){\n        return `${item.id}`;\n    }\n\n    render() {\n        return (\n          <div>\n            <div className=\"App-header\">\n                <h1> Movie Search Tool </h1>\n            </div>\n            <div className=\"Autocomplete\">\n                <Autocomplete\n                    getItemValue={this.getItemValue}\n                    items={this.state.autocompleteData}\n                    renderItem={this.renderItem}\n                    value={this.state.value}\n                    onChange={this.onChange}\n                    onSelect={this.onSelect}\n                />\n            </div>\n            <div>\n                <Results\n                    title={this.state.title}\n                    release={this.state.release}\n                    budget={this.state.budget}\n                    runtime={this.state.runtime}\n                    summary={this.state.summary}\n                    />\n            </div>\n          </div>\n        );\n      }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}